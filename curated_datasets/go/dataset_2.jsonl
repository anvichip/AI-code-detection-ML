{"code": "package main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    _ \"github.com/lib/pq\"\n)\n\nconst (\n    host     = \"localhost\"\n    port     = 5432 // Default PostgreSQL port\n    user     = \"your_username\"\n    password = \"your_password\"\n    dbname   = \"your_database\"\n)\n\nfunc main() {\n    // Connection string\n    psqlInfo := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",\n        host, port, user, password, dbname)\n\n    // Connect to the database\n    db, err := sql.Open(\"postgres\", psqlInfo)\n    if err != nil {\n        log.Fatalf(\"Failed to connect to database: %v\", err)\n    }\n    defer db.Close()\n\n    // Check the connection\n    err = db.Ping()\n    if err != nil {\n        log.Fatalf(\"Failed to ping database: %v\", err)\n    }\n\n    // Create logs table\n    createTableSQL := `CREATE TABLE IF NOT EXISTS logs (\n        id SERIAL PRIMARY KEY,\n        timestamp TIMESTAMP NOT NULL,\n        message TEXT NOT NULL\n    );`\n    _, err = db.Exec(createTableSQL)\n    if err != nil {\n        log.Fatalf(\"Failed to create table: %v\", err)\n    }\n\n    // Insert data into the table\n    insertSQL := `INSERT INTO logs (timestamp, message) VALUES ($1, $2)`\n    _, err = db.Exec(insertSQL, time.Now(), \"This is the first log message\")\n    if err != nil {\n        log.Fatalf(\"Failed to insert data into logs table: %v\", err)\n    }\n\n    // Query all entries from logs\n    rows, err := db.Query(\"SELECT id, timestamp, message FROM logs\")\n    if err != nil {\n        log.Fatalf(\"Failed to query data from logs table: %v\", err)\n    }\n    defer rows.Close()\n\n    // Print all log entries\n    for rows.Next() {\n        var id int\n        var timestamp time.Time\n        var message string\n        err := rows.Scan(&id, &timestamp, &message)\n        if err != nil {\n            log.Fatal(\"Failed to read data from query result: %v\", err)\n        }\n        fmt.Printf(\"ID: %d, Timestamp: %s, Message: %s\\n\", id, timestamp, message)\n    }\n\n    // Check for any error experienced during iteration\n    err = rows.Err()\n    if err != nil {\n        log.Fatal(\"Encountered error during row iteration: %v\", err)\n    }\n}\n", "writer": "AI"}
{"code": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\t// Connect to the database\n\tdb, err := sql.Open(\"postgres\", \"user=postgres dbname=mydatabase sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t// Create the logs table if it doesn't exist\n\t_, err = db.Exec(`CREATE TABLE IF NOT EXISTS logs (\n\t\tid SERIAL PRIMARY KEY,\n\t\tmessage TEXT\n\t)`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Insert sample data into the logs table\n\t_, err = db.Exec(\"INSERT INTO logs (message) VALUES ($1), ($2), ($3)\", \"Log entry 1\", \"Log entry 2\", \"Log entry 3\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Retrieve all log entries from the logs table\n\trows, err := db.Query(\"SELECT * FROM logs\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rows.Close()\n\n\t// Iterate over the rows and print each log entry\n\tfmt.Println(\"Log Entries:\")\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar message string\n\t\terr := rows.Scan(&id, &message)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"ID: %d, Message: %s\\n\", id, message)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}", "writer": "Human"}
