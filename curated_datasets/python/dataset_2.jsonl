{"code": "def is_prime(num):\n    # Handle special cases\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    \n    # Check for even numbers and multiples of 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # Use the 6k +/- 1 rule to check for factors up to the square root of num\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n        \n    return True\n\n# Example usage\nprint(is_prime(7))  # Output: True\nprint(is_prime(10)) # Output: False\n", "writer": "AI"}
{"code": "def average_rating(books):\n    # Ensure that there is at least one book to calculate the average\n    if not books:\n        return 0\n\n    total_rating = 0\n    book_count = 0\n\n    # Summing up all ratings and counting books\n    for book in books:\n        total_rating += book.rating\n        book_count += 1\n\n    # Calculating the average rating\n    if book_count == 0:\n        return 0\n\n    return total_rating / book_count\n", "writer": "AI"}
{"code": "def sum_of_evens(numbers):\n    # Sum all even numbers in the input list\n    return sum(num for num in numbers if num % 2 == 0)\n", "writer": "AI"}
{"code": "def first_non_repeated_char(s):\n    # Dictionary to store count of each character\n    char_count = {}\n    \n    # Count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # Return None if no non-repeated character is found\n    return None\n", "writer": "AI"}
{"code": "def move_zeros_to_end(nums):\n    # Index to place the next non-zero element\n    position = 0\n\n    # First pass to handle all non-zero elements\n    for num in nums:\n        if num != 0:\n            nums[position] = num\n            position += 1\n\n    # Fill the rest of the array with zeros\n    for i in range(position, len(nums)):\n        nums[i] = 0\n\n# Example usage:\nnums1 = [0, 1, 0, 3, 12]\nmove_zeros_to_end(nums1)\nprint(nums1)  # Output: [1, 3, 12, 0, 0]\n\nnums2 = [0, 0, 1]\nmove_zeros_to_end(nums2)\nprint(nums2)  # Output: [1, 0, 0]\n", "writer": "AI"}
{"code": "import influxdb\nimport datetime\n\ndef get_percentage_change(measurement, field, database_url='http://localhost:8086', database_name='example_db'):\n    # Create a client and connect to the InfluxDB instance\n    client = influxdb.InfluxDBClient(host=database_url, port=8086)\n    \n    try:\n        # Connect to the specified database\n        client.switch_database(database_name)\n        \n        # Calculate the time range for the last two hours\n        end_time = datetime.datetime.utcnow()\n        start_time = end_time - datetime.timedelta(hours=2)\n        \n        # Query for maximum value of the given field from the specified measurement over the last two one-hour periods\n        query = f\"\"\"\n        SELECT MAX(\"{field}\") FROM \"{measurement}\"\n        WHERE time >= '{start_time.isoformat()}Z' AND time < '{end_time.isoformat()}Z'\n        GROUP BY time(1h) fill(none)\n        \"\"\"\n        \n        # Execute the query\n        results = client.query(query)\n        \n        # Extract the maximum values from the query results\n        max_values = list(results.get_points())\n\n        if len(max_values) != 2:\n            return \"Insufficient data for calculation\"\n        \n        # Obtain the maximum values for the last two hours\n        max_prev_hour = max_values[0]['max']\n        max_last_hour = max_values[1]['max']\n        \n        # Calculate the percentage change between the two hours\n        if max_prev_hour is None or max_last_hour is None:\n            return \"Insufficient data for calculation\"\n        \n        percentage_change = ((max_last_hour - max_prev_hour) / max_prev_hour) * 100 if max_prev_hour != 0 else float('inf')\n        \n        return f\"The percentage change in {field} for the last hour is {percentage_change:.2f}%\"\n    \n    except influxdb.exceptions.InfluxDBClientError as e:\n        return f\"Database error: {str(e)}\"\n    \n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"\n    \n    finally:\n        client.close()\n\n# Example usage (uncomment to test in a real environment):\n# print(get_percentage_change('stock_prices', 'closing_price', 'http://localhost:8086', 'financial_data'))\n", "writer": "AI"}
{"code": "from django.db.models import Q\n\ndef get_customers_by_zip_prefix():\n    # Query Customer models where the zip_code starts with '123'\n    customers = Customer.objects.filter(zip_code__startswith='123')\n    \n    # Convert the QuerySet to a list of dictionaries\n    customer_list = list(customers.values())\n    \n    return customer_list\n", "writer": "AI"}
{"code": "import random\n\ndef roll_die():\n    \"\"\"Simulate rolling a six-sided die using random.randint.\"\"\"\n    return random.randint(1, 6)\n\ndef roll_die_n_times(n):\n    \"\"\"Simulate rolling a six-sided die n times and return a count of each result.\"\"\"\n    results = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\n    for _ in range(n):\n        result = roll_die()\n        results[result] += 1\n    return results\n", "writer": "AI"}
{"code": "def merge_intervals(intervals):\n    # Sort the list of intervals by their start values\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = []\n    \n    for interval in intervals:\n        # If the list of merged intervals is empty or if the current interval does not overlap with the previous one\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            # There is overlap, merge the current interval with the previous one\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    \n    return merged\n", "writer": "AI"}
{"code": "def find_longest_word(word_list):\n    # Initialize the default variable for the longest word and its length\n    longest_word = ''\n    max_length = 0\n    \n    # Loop through each word in the list\n    for word in word_list:\n        # Check if the current word's length is greater than the max length found so far\n        if len(word) > max_length:\n            longest_word = word\n            max_length = len(word)\n    \n    # Return the longest word and its length as a tuple\n    return (longest_word, max_length)\n", "writer": "AI"}
{"code": "def is_prime(number):\n    if number <= 1:\n        return False  # 1 and all negative numbers are not prime\n\n    if number <= 3:\n        return True  # 2 and 3 are prime\n\n    if number % 2 == 0:\n        return False  # Even numbers greater than 2 are not prime\n\n    # Check for divisibility by odd numbers from 3 to the square root of the number\n    for i in range(3, int(number**0.5) + 1, 2):\n        if number % i == 0:\n            return False  # The number is divisible by 'i' and hence not prime\n\n    return True  # If no divisors were found, the number is prime\n\n# Test cases\ninput1 = 7\noutput1 = is_prime(input1)\nprint(output1)  # Output: True\n\ninput2 = 10\noutput2 = is_prime(input2)\nprint(output2)  # Output: False", "writer": "Human"}
{"code": "def avg_rating_of_books():\n  books = Books.objects.all()\n  total_rating = 0\n  for book in books:\n    total_rating += book.rating\n\n  total_books = books.count()\n  average_rating_of_books = total_rating/total_books\n  return average_rating_of_books", "writer": "Human"}
{"code": "def evenSum(numList):\n  if len(numList) == 0:\n    return 0\n  return sum(num for num in numList if num % 2 == 0)", "writer": "Human"}
{"code": "def first_non_repeated_char(string):\n    char_count = {}\n    non_repeated_chars = set()\n\n    for char in string:\n        if char in char_count:\n            non_repeated_chars.discard(char)\n        else:\n            char_count[char] = 1\n            non_repeated_chars.add(char)\n\n    for char in string:\n        if char in non_repeated_chars:\n            return char\n\n    return None\n\n# Example usage\nresult = first_non_repeated_char('abaccdeff')\nprint(result)  # Output: 'b'\n\nresult = first_non_repeated_char('abcdefggfedcba')\nprint(result)  # Output: None", "writer": "Human"}
{"code": "def move_zeroes(nums):\n  count = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[count], nums[i]= nums[i], nums[count]\n      count += 1\n  for i in range(count, len(nums)):\n    nums[i] =0\n\ninput = [int(x) for x in input(\"Enter integers separated by spaces: \").split()]\nmove_zeroes(input)\n\nprint(input)", "writer": "Human"}
{"code": "from influxdb import InfluxDBCClient\nfrom datetime import timedelta, datetime\n\ndef calculate_percentage_change(measurement, feild, database, host = 'localhost', port = 8086, username = None, password = None):\n  try:\n    # Connect to Influx DB.\n    client = InfluxDBCClient(host, port, username, password, database)\n    \n    # Calculate the time range for the last two hours\n    end_time = datetime.utcnow()\n    start_time = end_time - timedelta(hours = 2)\n\n    # Build the Influx DB query\n    query = f'SELECT MAX(\"{field}\") FROM \"{measurement}\" WHERE time >= \\'{start_time.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}\\' AND time <= \\'{end_time.strftime(\"%Y-%M-%dT%H:%M:%SZ\")}\\' GROUP BY time(1h)'\n\n    # Query InfluxDB\n    result = client.query(query)\n\n    # Extract max value for the last two hours\n    max_values = list(result.get_points())\n\n    if len(max_values)>= 2:\n      # Calculate percentage change\n      current_hour_value = max_values[-1]['max']\n      previous_hour_value = max_values[-2]['max']\n      percentage_change = ((current_hour_value-previous_hour_value) / abs(previous_hour_value)) * 100\n      return f'The percentage change in {feild} for the last hour is {percentage_change:.2f} %'\n      \n    else:\n      return f'Insufficient data to calculate percentage change.'\n\n  except Exception as e:\n    return f'Error: {str(e)}'\n    \n  finally:\n    if client:\n      client.close()", "writer": "Human"}
{"code": "from django.views.generic import ListView\n\nclass PersonListView(ListView):\n    model = Person\n    template_name = 'person_list.html'\n\n    def get_queryset(self):\n        return Person.objects.filter(birthdate__year__lte=2005)", "writer": "Human"}
{"code": "import random\n\ndef rolling():\n  rand_num = random.choice([1,2,3,4,5,6])\n  return rand_num\n\ndef prob(int(n)):\n  occurrence = dict()\n  for i in len(n):\n    num = rolling()\n    if num == 1:\n      count_1 = count_1 + 1\n    else if num == 2:\n      count_2 = count_2 + 1 \n    else if num == 3:\n      count_3 = count_3 + 1\n    else if num == 4:\n      count_4 = count_4 + 1\n    else if num == 5:\n      count_5 = count_5 + 1\n    else if num == 6:\n      count_6 = count_6 + 1\n\n    occurrence[\"count_1\"] = count_1\n    occurrence[\"count_2\"] = count_2\n    occurrence[\"count_3\"] = count_3\n    occurrence[\"count_4\"] = count_4\n    occurrence[\"count_5\"] = count_5\n    occurrence[\"count_6\"] = count_6\n    \n    return occurrence", "writer": "Human"}
{"code": "def merge_intervals(intervals):\n  if not intervals:\n    return []\n\n  intervals.sort(key =lambda x: x[0])\n  merged = [intervals[0]]\n  for i in range(1, len(intervals)):\n    current_interval = intervals[i]\n    last_merged = merged[-1]\n    if current_interval[0] <= last_merged[1]:\n      last_merged[1] = max(last_merged[1], current_interval[1])\n    else:\n      merged.append(current_interval)\n  return merged\n\n\n#testing the function with provided test cases/examples \nintervals1 = [[1,3],[2,6],[8,10],[15,18]]\nprint(merge_intervals(intervals1))\nintervals2 = [[1,4],[4,5]]\nprint(merge_intervals(intervals2))", "writer": "Human"}
{"code": "input_list = [\"appel\", \"kroket\", \"kaassoufl\u00e9\", \"schoen\", \"auto\"]\ndef longest_word(input_list):\n\tlongest_word = \"\"\n\tword_count = 0\n\tfor word in input_list:\n\t\tif len(word) > word_count:\n\t\t\tlongest_word = word\n\t\t\tword_count = len(word)\n\treturn (longest_word, word_count)\nlongest_word(input_list)", "writer": "Human"}
