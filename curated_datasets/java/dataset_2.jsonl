{"code": "public class Main {\n    public static void main(String[] args) {\n        int[] array = {1, 4, 2, 9, 5}; // Example input array\n        int largest = findLargestElement(array); // Finding the largest element\n        System.out.println(largest); // Output the largest element\n    }\n\n    // Method to find the largest element in the array\n    public static int findLargestElement(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"Array should not be empty\");\n        }\n        int max = arr[0]; // Assume the first element is the largest initially\n\n        // Traverse the array to find the largest element\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i]; // Update max if current element is greater\n            }\n        }\n        return max; // Return the largest element\n    }\n}\n", "writer": "AI"}
{"code": "public class ReverseWords {\n\n    public static String reverseWords(String s) {\n        // Split the input string on one or more spaces\n        String[] words = s.split(\"\\\\s+\");\n        // StringBuilder to hold the reversed words\n        StringBuilder reversed = new StringBuilder();\n        \n        // Iterate over the words array from the last element to the first\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]); // Append the word to the StringBuilder\n            if (i > 0) {\n                reversed.append(\" \"); // Append a space if it's not the last word\n            }\n        }\n        return reversed.toString(); // Convert StringBuilder to String and return it\n    }\n\n    // Main method to test the reverseWords function\n    public static void main(String[] args) {\n        String input = \"Hello World!\";\n        String reversed = reverseWords(input);\n        System.out.println(reversed);  // Output: \"World! Hello\"\n    }\n}\n", "writer": "AI"}
{"code": "import java.util.Arrays;\n\npublic class PrimeChecker {\n    public static void main(String[] args) {\n        int number1 = 7;\n        int number2 = 12;\n\n        System.out.println(isPrime(number1)); // Output: true\n        System.out.println(isPrime(number2)); // Output: false\n    }\n\n    // Function to check if a number is prime using Sieve of Eratosthenes\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false; // 0 and 1 are not prime numbers\n        boolean[] isPrime = new boolean[n + 1];\n        Arrays.fill(isPrime, true); // Assume all numbers are prime\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i <= n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    isPrime[j] = false; // Marking the multiples of i as non-prime\n                }\n            }\n        }\n\n        return isPrime[n]; // Return the primality of n\n    }\n}\n", "writer": "AI"}
{"code": "public class ReverseString {\n    public static void main(String[] args) {\n        String input = \"hello\";  // The original string\n        String reversed = \"\";   // This will store the reversed string\n\n        // Looping from the end of the string to the beginning\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed += input.charAt(i);  // Adding each character to the reversed string\n        }\n\n        System.out.println(reversed);  // Output the reversed string\n    }\n}\n", "writer": "AI"}
{"code": "public class PalindromeChecker {\n\n    public static boolean isPalindrome(String s) {\n        s = s.toLowerCase().replaceAll(\"[^a-z0-9]\", \"\"); // Normalize: remove non-alphanumeric and convert to lower case\n        int left = 0; // Starting index\n        int right = s.length() - 1; // Ending index\n\n        while (left < right) { // Compare characters from each end\n            if (s.charAt(left) != s.charAt(right)) {\n                return false; // If characters do not match, it's not a palindrome\n            }\n            left++; // Move inward from the left side\n            right--; // Move inward from the right side\n        }\n\n        return true; // If no mismatches, it is a palindrome\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"A man, a plan, a canal: Panama\")); // Output: true\n        System.out.println(isPalindrome(\"race a car\")); // Output: false\n    }\n}\n", "writer": "AI"}
{"code": "public class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // HashMap to store the indices of the numbers\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            // Check if the complement exists in the map\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                // If complement exists, return the pair of indices\n                return new int[] {map.get(complement), i};\n            }\n            // Store the index of the current number in the map\n            map.put(nums[i], i);\n        }\n        // Return an empty array if no solution is found\n        return new int[] {};\n    }\n}\n", "writer": "AI"}
{"code": "fun findLargestElement(array: IntArray) : Int {\n  if (array.isEmpty()) {\n    return -1\n  }\n\n  var maximum = array[0]\n\n  for (item in array) {\n    if (item > maximum) {\n      maximum = item\n    }\n  }\n\n  return maximum\n    \n}", "writer": "Human"}
{"code": "str_helloworld = \"Hello World!\"\n\nstr_hw_splitted = str_helloworld.split(\" \")\n\nstr_reverse = str_hw_splitted[::-1]\n\nprint(str_helloworld, \"-> \", str_reverse[0], str_reverse[1])", "writer": "Human"}
{"code": "static boolean sieveOfEratosthenes(int checkNumber) {\n  if (checkNumber == 0 || checkNumber == 1) return false;\n\n  boolean prime[] = new boolean[checkNumber+1];\n  for(int i = 1; i <= checkNumber; i++) \n    prime[i] = true;\n\n  for(int j = 2; j*j <= checkNumber; j++){\n    if(prime[j]) {\n      for(int i = j*j; i <= checkNumber; i+=j) {\n        prime[i] = false;\n      }\n    }\n  }\n  return prime[checkNumber];\n}\n\npublic static void main(String[] args) {\n  int checkNumber = 7;\n  System.out.println(sieveOfEratosthenes(checkNumber));\n}", "writer": "Human"}
{"code": "Class reverse{\n  public Static void main(String args[]){\n    String s=\"hello\"\n    String st=\" \"\n    for(i=0;i<s.length;i++){\n      ch=s.charAt(i)\n      st=st+ch;  \n    }  \n    System.out.println(st)  \n  }\n}", "writer": "Human"}
{"code": "import java.util.Scanner;\n \nclass palindrome {\n    public static void main(String[] args) {\n        Scanner scanner=new Scanner(System.in);\n        System.out.println(\"Enter a string as an input to check whether it is palindrome or not\");\n        String input= scanner.nextLine();\n        //checking whether palindrome or not\n        if(isPalindrome(input))\n        {\n            System.out.println(input+\" is a palindrome string\");\n        }\n        else\n        {\n            System.out.println(input+\" is not a palindrome string\");\n        }\n    }\n \n    public static boolean isPalindrome(String str) {\n        int left = 0, right = str.length() - 1;\n        \n        while(left < right)\n        {\n            if(str.charAt(left) != str.charAt(right))\n            {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    } \n}", "writer": "Human"}
{"code": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class TwoSum {\n    public static int[] findTwoSum(int[] nums, int target) {\n        Map<Integer, Integer> numIndices = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (numIndices.containsKey(complement)) {\n                return new int[] { numIndices.get(complement), i };\n            }\n            numIndices.put(nums[i], i);\n        }\n        return new int[] {}; // return an empty array if no solution\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n        int[] indices = findTwoSum(nums, target);\n        if (indices.length == 2) {\n            System.out.println(\"Output: [\" + indices[0] + \", \" + indices[1] + \"]\");\n        } else {\n            System.out.println(\"No solution found.\");\n        }\n    }\n}", "writer": "Human"}
