{"code": "#include <vector>\n\nbool isValidSudoku(const std::vector<std::vector<int>>& board) {\n    // Using arrays for row, column, and sub-grid checks\n    int row[9][9] = {0}, col[9][9] = {0}, sub[3][3][9] = {0};\n\n    for (int i = 0; i < 9; ++i) {\n        for (int j = 0; j < 9; ++j) {\n            int num = board[i][j] - 1; // Adjusting number to be zero-indexed\n            int k = (i / 3) * 3 + (j / 3); // Finding subgrid index\n\n            // Check if this num has already been used in the row, column, or subgrid\n            if (row[i][num]++ || col[j][num]++ || sub[i/3][j/3][num]++)\n                return false;\n        }\n    }\n\n    return true;\n}\n", "class": 1, "model": "GPT-4-Turbo"}
{"code": "#include <iostream>\n#include <string>\n\nbool isPalindrome(const std::string &str) {\n    int left = 0; // Start pointer\n    int right = str.length() - 1; // End pointer\n\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false; // Not a palindrome if mismatch happens\n        }\n        left++;  // Move left pointer right\n        right--; // Move right pointer left\n    }\n    return true; // It is a palindrome if no mismatches occur\n}\n\nint main() {\n    std::string input = \"radar\";\n    std::cout << (isPalindrome(input) ? \"true\" : \"false\") << std::endl;\n\n    input = \"hello\";\n    std::cout << (isPalindrome(input) ? \"true\" : \"false\") << std::endl;\n\n    return 0;\n}\n", "class": 1, "model": "GPT-4-Turbo"}
{"code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring getMiddle(string s) {\n    int n = s.length();\n    if (n % 2 == 1) // If the length is odd\n        return s.substr(n / 2, 1);\n    else // If the length is even\n        return s.substr(n / 2 - 1, 2);\n}\n\nint main() {\n    // Test cases\n    cout << getMiddle(\"abcde\") << endl;   // Should return \"c\"\n    cout << getMiddle(\"abcdef\") << endl;  // Should return \"cd\"\n    return 0;\n}\n", "class": 1, "model": "GPT-4-Turbo"}
{"code": "#include <atlstr.h>  // Include ATL string classes\n#include <vector>\n\n// Function to create the lps (Longest Prefix Suffix) array for KMP algorithm\nstd::vector<int> computeLPSArray(const CString& pattern) {\n    int M = pattern.GetLength();\n    std::vector<int> lps(M, 0);\n    int len = 0;\n    int i = 1;\n    \n    // Compute lps array\n    while (i < M) {\n        if (pattern[i] == pattern[len]) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    return lps;\n}\n\n// KMP search algorithm\nstd::vector<int> KMPSearch(const CString& text, const CString& pattern) {\n    int M = pattern.GetLength();\n    int N = text.GetLength();\n    std::vector<int> lps = computeLPSArray(pattern);\n    std::vector<int> results;\n\n    int i = 0;  // index for text\n    int j = 0;  // index for pattern\n    while (i < N) {\n        if (pattern[j] == text[i]) {\n            j++;\n            i++;\n        }\n\n        if (j == M) {\n            results.push_back(i - j);\n            j = lps[j - 1];\n        } else if (i < N && pattern[j] != text[i]) {\n            if (j != 0)\n                j = lps[j - 1];\n            else\n                i = i + 1;\n        }\n    }\n\n    return results;\n}\n\n// Example usage\nint main() {\n    CString text = _T(\"ABABDABACDABABCABAB\");\n    CString pattern = _T(\"ABABCABAB\");\n    auto results = KMPSearch(text, pattern);\n    for (int index : results) {\n        std::cout << index << \" \";\n    }\n\n    std::cout << std::endl;\n    return 0;\n}\n", "class": 1, "model": "GPT-4-Turbo"}
